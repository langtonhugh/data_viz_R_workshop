---
title: "Data visualisation in R"
author: "Samuel Langton"
date: "5 February 2019"
output:
  html_document:
    toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr); library(sf)
```

## Preamble

The page contains the course material for a workshop hosted jointly between the [University of Manchester](https://www.methods.manchester.ac.uk/) and the [UK Data Service](https://ukdataservice.ac.uk/). All material and associated scripts are available on [GitHub](https://github.com/langtonhugh/data_viz_workshop).

## Background

This morning we covered data visualisation in R using `ggplot2`, a graphics package based on the [grammar of graphics](https://vita.had.co.nz/papers/layered-grammar.html) which is fully integrated into the [tidyverse](https://www.tidyverse.org/). By now you will have a solid understanding of how to build graphics using the package. Fortunately, due to the integration of spatial packages in R and ggplot, the step from making standard graphics to making spatial visualisations (e.g. thematic maps) is a small one. We'll be making use of exactly the same skills you picked up earlier, but with spatial data.

One of the fastest growing packages in this area is [sf](https://github.com/r-spatial/sf), which gives you access to a whole host of features and functions for use with spatial data, including visualisation. There is a highly comprehensive book available [online](https://geocompr.robinlovelace.net/), written by the creators, which outlines sf and its uses in detail. If you are interested in taking things further after this course, that book is the way to go, but there are also plenty of [general introductions](https://www.research.manchester.ac.uk/portal/en/publications/gis-and-geovisual-analysis(6f08f8f5-fb0c-4280-8c82-c8f1b7e02d76).html) to spatial data out there. For this exercise, we'll keep things simple, and focus on how to use sf to make spatial data visualisations.

The package has complete functionality within ggplot through an additional geometry `geom_sf()` which becomes available once you've installed and loaded `sf`. Do that now using the `install.packages()` and `library()` respectively. Once done, we can move onto our first example.

## Point maps

Earlier today we examined neighbourhood burglary victimisation in Greater Manchester using crime counts at [Lower Super Output Area level](https://census.ukdataservice.ac.uk/use-data/guides/boundary-data.aspx). This information was created from individual records which are [openly available](https://data.police.uk/). These records, amongst other things, contain the location of where each crime occured with [latitude and longitude](https://www.latlong.net/) coordinates. Well, they tell you _roughly_ where the crime occurred, to ensure confidentiality. 

First, let's load in these individual records. This makes use of the `readr` package within the tidyverse, just as we have done previously.

```{r}
burg_records_df <- read_csv("https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/burglary_records.csv")
```

Taking some time to explore the data, you'll notice two variables called `latitude` and `longitude`







