---
title: "Data visualisation in R"
author: "Samuel Langton"
date: "5 February 2019"
output:
  html_document:
    toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr); library(sf)
```

## Preamble

The page contains the course material for a workshop hosted jointly between the [University of Manchester](https://www.methods.manchester.ac.uk/) and the [UK Data Service](https://ukdataservice.ac.uk/). All material and associated scripts are available on [GitHub](https://github.com/langtonhugh/data_viz_workshop).

## Background

Earlier today we covered data visualisation in R using `ggplot2`, a graphics package based on the [grammar of graphics](https://vita.had.co.nz/papers/layered-grammar.html) which is fully integrated into the [tidyverse](https://www.tidyverse.org/). By now you will have a solid understanding of how to build graphics using the package. Fortunately, due to the integration of spatial packages in R and ggplot, the step from making standard graphics to making spatial visualisations (e.g. thematic maps) is a small one. We'll be making use of exactly the same skills you picked up earlier, but with spatial data.

One of the fastest growing packages in this area is [sf](https://github.com/r-spatial/sf), which gives you access to a whole host of features and functions for use with spatial data, including visualisation. There is a highly comprehensive book available [online](https://geocompr.robinlovelace.net/), written by the creators, which outlines sf and its uses in detail. If you are interested in taking things further after this course, that book is the way to go, but there are also plenty of [general introductions](https://www.research.manchester.ac.uk/portal/en/publications/gis-and-geovisual-analysis(6f08f8f5-fb0c-4280-8c82-c8f1b7e02d76).html) to spatial data out there. For this exercise, we'll keep things simple, and focus on how to use sf to make spatial data visualisations in combination with ggplot. Should you want to know more, or would like additional resources on using spatial data in R, please do not hesitate to ask!

## Spatial data using sf

### Raw data

Earlier today we examined neighbourhood burglary victimisation in Greater Manchester. This information was created from individual records which are [openly available](https://data.police.uk/) online. These records, amongst other things, contain the location of where each crime occurred with [latitude and longitude](https://www.latlong.net/) coordinates. Well, they tell you _roughly_ where the crime occurred, to ensure confidentiality. The first thing we might want to do when exploring burglary victimisation is to map out these locations to identify interesting patterns and hotspots.

First, let's load in some individual records as a standard data frame from a .csv file. This makes use of the `readr` package within the tidyverse, just as we have done previously. This specific data set contains burglary records occurring in Manchester during January 2017.

```{r, warning=F, message=F}
burg_records_df <- read_csv("https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/burglary_records.csv")
```

Taking some time to explore the data, you'll notice two variables called `latitude` and `longitude` which collectively specify the location of each burglary record. But, in its current form, this spatial information is simply being treated like any other numeric variable in R. Using the sf package, we can convert these variables to coordinates with spatial properties for point mapping and spatial analysis. We do this using the `st_as_sf()` function, in which we specify the original data, and the variables defining the coordinates of our points. In doing so, we create a new object `burg_records_sf` (note the subtle name change) which is an sf object with spatial properties. 

```{r}
burg_records_sf <- st_as_sf(x = burg_records_df, coords = c(x = "Longitude", y = "Latitude"), crs = 4326)
```

You will notice that we also specify a  Coordinate Reference System (CRS). This brings us to the topic of projections.

### Projections

Coordinate Reference Systems (CRS) allows us to position spatial entities (in this case, crime locations) on earth. Of course, when we are making maps and spatial data visualisations, we are simply _representing_ real-world information. Importantly, we are doing so on a flat surface (a computer screen or piece of paper) even though the earth itself is more-or-less spherical. In an attempt to portray spatial entities, whether it be crime locations or any other phenomena, on a flat surface, we perform a transformation known as a 'projection'. This is quite the mathematical challenge, and can be carried out in countless different ways, each of which have their own advantages and disadvantages. You might be aware of the [heated discussion](https://www.theverge.com/2018/8/5/17653122/google-maps-update-mercator-projection-earth-isnt-flat) over how Google Maps portrayed the earth on its online platform. Until recently, they used a projection known as the Mercator projection, which whilst useful for navigational purposes, also distorts the earth in a manner which makes land masses near the equator, such as Africa, appear much smaller than they actually are, and land masses near the poles, such as Greenland, much larger.

For what we are focusing on today, the important thing to know is that degrees of latitude and longitude, which you are probably fairly familiar with by name at least, use a geographic CRS called  _WGS 84_. This is probably the most common one out there, so you will come across it a lot. Each reference system has a corresponding unique code from the [ESPG registry](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset). And yes, you guessed it, the ESPG code for WGS 84 is `4326`, as stated in our code chunk above. When you view the object using `View(burg_records_sf)` you will notice that there is a new column called ‘geometry’ containing the coordinates for each observation.

You can read more about CRS and projections on the [QGIS](https://docs.qgis.org/2.8/en/docs/gentle_gis_introduction/coordinate_reference_systems.html) website, or take a look at the fantastic array of [textbooks](https://books.google.co.uk/books?hl=en&lr=&id=toobg6OwFPEC) on Geographic Information Systems (GIS). For a more light-heated explanation, I would recommend [this blog post](https://brilliantmaps.com/xkcd/) about what different map projections say about you.

```{r, echo=FALSE, out.width="600px", fig.align="center", fig.cap="Source: [Brilliant maps](https://brilliantmaps.com/xkcd/)"}
knitr::include_graphics("img/proj.png")
```

### Point maps

Now we have an sf object `burg_records_sf` which contains point-level spatial information about burglaries occurring in Manchester during January 2017. We can create a basic point map of these crimes using exactly the same skills we picked up with `ggplot2` this morning, but with a new geometry `geom_sf()`. 

```{r, out.width="900px"}
ggplot(data = burg_records_sf) +
  geom_sf()
```

You'll notice that to plot the points contained in our sf object we don't even need to specify any aesthetics. The axis have been automatically defined based on the range of latitude and longitude coordinates of each observation, which are retained within the `geometry` column of the object. Even with this basic visualisation, one can identify some interesting patterns. with many burglaries clustering in specific areas of the city.

One can add additional variables to these point maps using additional aesthetics, just as we did earlier. For instance, to explore the outcome of these crimes we can colour each point by the `outcome` variable, which details how each burglay was resolved. Note that we specify the shape of the points to ensure we can use the fill aesthetic as required, and make some additional tweaks using the skills we learnt earlier today.

```{r, out.width="900px"}
ggplot(data = burg_records_sf) +
  geom_sf(mapping = aes(fill = outcome), pch = 21, size = 2) +
  scale_fill_viridis_d() +
  theme_bw()
```

Whilst the above might help us identify interesting patterns, point-level open crime data is rarely used for detailed analysis. For one thing, the data is [not entirely accurate](https://www.tandfonline.com/doi/full/10.1080/15230406.2014.972456) because the raw coordinates have been 'snapped' to pre-defined points to ensure confidentiality. This means that points are highly likely to be overlapping, giving a skewed picture of the distribution. There are ways round this, such as through [jittering](https://r-spatial.github.io/sf/reference/st_jitter.html), but even so, not much other data is collected at such a fine-grained scale. Instead, area-based visualisations of crime data can be deployed, and matched with associative data, such as that of the census, to provide a more comprehensive picture of crime concentrations.

### Area maps



