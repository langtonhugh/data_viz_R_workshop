panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
# Chunk 29
my_theme <- theme_minimal() +                                                                  # Lay down default theme
theme(plot.title   = element_text(colour = "white", size = 10, family = "mono"),  # Title colour, size, font type
plot.subtitle = element_text(colour = "white", size = 6 , family = "mono"), # As above for subtitle
axis.title   = element_text(colour = "white", size = 8 , family = "mono"),  # As above for axis titles
axis.text    = element_text(colour = "white", size = 5 , family = "mono"),  # As above for axis text
legend.text  = element_text(colour = "white", size = 8 , family = "mono"),  # As above, for legend text
axis.ticks   = element_blank(),                                             # Turn off axis ticks
legend.title = element_blank(),                                             # Turn off legend title
panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
# Chunk 30
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname), colour = "transparent") +
scale_fill_viridis_d() +
facet_wrap(~LAname) +
my_theme +
theme(legend.position = "none")
# Chunk 31
knitr::include_graphics("img/cow.png")
library(cowplot)
# Chunk 32
bar_gg <- ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci), fill = as.factor(IMDdeci))) +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "none")
density_gg <- ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname)) +
facet_wrap(~LAname) +
theme(legend.position = "none")
plot_grid(bar_gg, density_gg, nrow = 1, labels = c("(a)", "(b)"), scale = c(0.9,0.9), rel_widths = c(1,1.3))
plot_grid(bar_gg, density_gg, nrow = 1, labels = c("(a)", "(b)"), scale = c(0.9,0.9), rel_widths = c(1,1.3))
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci), fill = as.factor(IMDdeci))) +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "none") +
my_theme
bar_gg <- ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci), fill = as.factor(IMDdeci))) +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "none") +
my_theme
density_gg <- ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname)) +
facet_wrap(~LAname) +
theme(legend.position = "none") +
my_theme
plot_grid(bar_gg, density_gg, nrow = 1, labels = c("(a)", "(b)"), scale = c(0.9,0.9), rel_widths = c(1,1.3))
plot_grid(bar_gg, density_gg, nrow = 1, labels = c("(a)", "(b)"), scale = c(0.9,0.9), rel_widths = c(1,1.3)) + my_theme
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci), fill = LAname), position = "dodge")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = IMDdeci), position = "dodge")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = IMDdeci, group = IMDdeci), position = "dodge")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, group = IMDdeci), position = "dodge")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, group = IMDdeci, fill = as.factor(IMDdeci), position = "dodge")
)
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, group = IMDdeci, fill = as.factor(IMDdeci), position = "dodge"))
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, group = IMDdeci, fill = as.factor(IMDdeci)), position = "dodge")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, group = IMDdeci, fill = as.factor(IMDdeci)), position = "dodge") +
scale_fill_brewer(palette = "Spectral")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = as.factor(IMDdeci)), position = "dodge") +
scale_fill_brewer(palette = "Spectral")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = as.factor(IMDdeci)), position = "dodge") +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "bottom")
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = as.factor(IMDdeci))) +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "bottom")
install.packages("geogrid")
# Number of LSOAs.
nrow(manc_sf)
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Number of LSOAs.
nrow(manc_sf)
library(sf)
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Number of LSOAs.
nrow(manc_sf)
# Load data.
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Number of LSOAs.
nrow(manc_sf) # N = 282
# Plot raw boundaries.
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci)))
names(manc_sf)
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr); library(sf)
# Chunk 2
library(geogrid)
# Chunk 3
# Load data.
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Number of LSOAs.
nrow(manc_sf) # N = 282
# Plot raw boundaries with deprivation deciles.
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci)))
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
warnings()
manc_sf <- st_transform(manc_sf, 27700)
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
install.packages("geogrid")
install.packages("geogrid")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr); library(sf)
# Chunk 2
library(geogrid)
# Chunk 3
# Load data.
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Number of LSOAs.
nrow(manc_sf) # N = 282
# Plot raw boundaries with deprivation deciles.
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci)))
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
ploit(manc_grid)
plot(manc_grid)
class(sf)
class(manc_grid)
ggplot(data = manc_grid) + geom_sf()
?assign_polygons
manc_grid_results <- assign_polygons(shape = manc_sf, new_polygons = manc_grid)
class(manc_grid_results)
nrow(manc_grid_results)
# Load data.
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Ensure BNG CRS.
manc_sf <- st_transform(manc_sf, crs = 27700)
# Number of LSOAs.
nrow(manc_sf) # N = 282
# Plot raw boundaries with deprivation deciles.
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci)))
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
plot(manc_grid)
manc_grid_results <- assign_polygons(shape = manc_sf, new_polygons = manc_grid)
manc_grid_results_sf <- assign_polygons(shape = manc_sf, new_polygons = manc_grid)
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma")
ggplot(data = manc_grid_results_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
theme(legend.position = "bottom")
depriv_orig <- ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
depriv_grid <- ggplot(data = manc_grid_results_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
plot_grid(depriv_orig, depriv_grid, labels = c("Raw boundaries", "Regular grid"))
library(cowplot)
depriv_orig <- ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
depriv_grid <- ggplot(data = manc_grid_results_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
plot_grid(depriv_orig, depriv_grid, labels = c("Raw boundaries", "Regular grid"))
depriv_orig <- ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
depriv_grid <- ggplot(data = manc_grid_results_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
plot_grid(depriv_orig, depriv_grid, labels = c("Raw boundaries", "Regular grid"), scale = 0.9)
?calculate_grid
st_write(obj = manc_grid_results_sf, dsn = "data/geogrid_manc.shp")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr)
# Chunk 2
knitr::include_graphics("img/gg.png")
# Chunk 3
df1 <- data.frame(var1 = c(5, 3, 7, 9, 12),
var2 = c(7, 2, 9, 15, 17),
var3 = c("AA","AA","AA", "BB","BB"))
# Chunk 4
ggplot(data = df1)
# Chunk 5
ggplot(data = df1, mapping = aes(x = var1, y = var2))
# Chunk 6
ggplot(data = df1, mapping = aes(x = var1, y = var2)) +
geom_point()
# Chunk 7
ggplot(data = df1, mapping = aes(x = var1, y = var2, colour = var3)) +
geom_point()
# Chunk 8
ggplot(data = df1, mapping = aes(x = var1, y = var2, shape = var3)) +
geom_point()
# Chunk 11
burglary_df <-  read_csv(file = "https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/gmp_2017.csv")
# Chunk 12
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count)) +
geom_point()
# Chunk 13
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point()
# Chunk 14
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point() +
scale_colour_brewer(palette = "Spectral")
# Chunk 15
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point() +
scale_colour_viridis_d() # or scale_colour_viridis_c() for a continuous variable
# Chunk 16
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral")
# Chunk 17
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between income and burglary victimisation",
caption = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority")
# Chunk 18
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between income and burglary victimisation",
caption = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority") +
theme_minimal()
# Chunk 19
ggplot(data = burglary_df) +
geom_histogram(mapping = aes(x = IMDscore))
# Chunk 20
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, group = LAname))
# Chunk 21
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname), alpha = 0.5)
# Chunk 22
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci)))  # convert IMDdeci to a factor on-the-fly
# Chunk 23
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = as.factor(IMDdeci)), position = "dodge") +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "bottom")
# Chunk 24
monthly_df <- read_csv(file = "https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/gmp_monthly_2017.csv")
# Chunk 25
ggplot(data = monthly_df, aes(x = as.factor(Month), y = n, group = crime_type, linetype = crime_type)) +
geom_line() +
geom_point()
# Chunk 26
ggplot(data = burglary_df) +
geom_point(mapping = aes(x = incscore, y = burglary_count)) +
facet_wrap(~LAname)
# Chunk 27
p1 <- ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.7) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between neighbourhood income and burglary victimisation",
subtitle = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority")
# Chunk 28
p1 + theme_minimal() +                                                                  # Lay down default theme
theme(plot.title   = element_text(colour = "white", size = 10, family = "mono"),  # Title colour, size, font type
plot.subtitle = element_text(colour = "white", size = 6 , family = "mono"), # As above for subtitle
axis.title   = element_text(colour = "white", size = 8 , family = "mono"),  # As above for axis titles
axis.text    = element_text(colour = "white", size = 5 , family = "mono"),  # As above for axis text
legend.text  = element_text(colour = "white", size = 8 , family = "mono"),  # As above, for legend text
axis.ticks   = element_blank(),                                             # Turn off axis ticks
legend.title = element_blank(),                                             # Turn off legend title
panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
# Chunk 29
my_theme <- theme_minimal() +                                                                  # Lay down default theme
theme(plot.title   = element_text(colour = "white", size = 10, family = "mono"),  # Title colour, size, font type
plot.subtitle = element_text(colour = "white", size = 6 , family = "mono"), # As above for subtitle
axis.title   = element_text(colour = "white", size = 8 , family = "mono"),  # As above for axis titles
axis.text    = element_text(colour = "white", size = 5 , family = "mono"),  # As above for axis text
legend.text  = element_text(colour = "white", size = 8 , family = "mono"),  # As above, for legend text
axis.ticks   = element_blank(),                                             # Turn off axis ticks
legend.title = element_blank(),                                             # Turn off legend title
panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname), colour = "transparent") +
scale_fill_viridis_d() +
facet_wrap(~LAname) +
my_theme +
theme(legend.position = "none")
p1
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr)
# Chunk 2
knitr::include_graphics("img/gg.png")
# Chunk 3
df1 <- data.frame(var1 = c(5, 3, 7, 9, 12),
var2 = c(7, 2, 9, 15, 17),
var3 = c("AA","AA","AA", "BB","BB"))
# Chunk 4
ggplot(data = df1)
# Chunk 5
ggplot(data = df1, mapping = aes(x = var1, y = var2))
# Chunk 6
ggplot(data = df1, mapping = aes(x = var1, y = var2)) +
geom_point()
# Chunk 7
ggplot(data = df1, mapping = aes(x = var1, y = var2, colour = var3)) +
geom_point()
# Chunk 8
ggplot(data = df1, mapping = aes(x = var1, y = var2, shape = var3)) +
geom_point()
# Chunk 11
burglary_df <-  read_csv(file = "https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/gmp_2017.csv")
# Chunk 12
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count)) +
geom_point()
# Chunk 13
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point()
# Chunk 14
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point() +
scale_colour_brewer(palette = "Spectral")
# Chunk 15
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point() +
scale_colour_viridis_d() # or scale_colour_viridis_c() for a continuous variable
# Chunk 16
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral")
# Chunk 17
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between income and burglary victimisation",
caption = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority")
# Chunk 18
ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.5) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between income and burglary victimisation",
caption = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority") +
theme_minimal()
# Chunk 19
ggplot(data = burglary_df) +
geom_histogram(mapping = aes(x = IMDscore))
# Chunk 20
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, group = LAname))
# Chunk 21
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname), alpha = 0.5)
# Chunk 22
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = as.factor(IMDdeci)))  # convert IMDdeci to a factor on-the-fly
# Chunk 23
ggplot(data = burglary_df) +
geom_bar(mapping = aes(x = LAname, fill = as.factor(IMDdeci)), position = "dodge") +
scale_fill_brewer(palette = "Spectral") +
theme(legend.position = "bottom")
# Chunk 24
monthly_df <- read_csv(file = "https://github.com/langtonhugh/data_viz_R_workshop/raw/master/data/gmp_monthly_2017.csv")
# Chunk 25
ggplot(data = monthly_df, aes(x = as.factor(Month), y = n, group = crime_type, linetype = crime_type)) +
geom_line() +
geom_point()
# Chunk 26
ggplot(data = burglary_df) +
geom_point(mapping = aes(x = incscore, y = burglary_count)) +
facet_wrap(~LAname)
# Chunk 27
p1 <- ggplot(data = burglary_df, mapping = aes(x = incscore, y = burglary_count, colour = LAname)) +
geom_point(size = 3, alpha = 0.7) +
scale_colour_brewer(palette = "Spectral") +
labs(x = "Income score",
y = "Burglary count",
title = "Relationship between neighbourhood income and burglary victimisation",
subtitle = "Income score derived from 2019 IMD measure. Burglary counts from 2017",
colour = "Local Authority")
# Chunk 28
p1 + theme_minimal() +                                                                  # Lay down default theme
theme(plot.title   = element_text(colour = "white", size = 10, family = "mono"),  # Title colour, size, font type
plot.subtitle = element_text(colour = "white", size = 6 , family = "mono"), # As above for subtitle
axis.title   = element_text(colour = "white", size = 8 , family = "mono"),  # As above for axis titles
axis.text    = element_text(colour = "white", size = 5 , family = "mono"),  # As above for axis text
legend.text  = element_text(colour = "white", size = 8 , family = "mono"),  # As above, for legend text
axis.ticks   = element_blank(),                                             # Turn off axis ticks
legend.title = element_blank(),                                             # Turn off legend title
panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
# Chunk 29
my_theme <- theme_minimal() +                                                                  # Lay down default theme
theme(plot.title   = element_text(colour = "white", size = 10, family = "mono"),  # Title colour, size, font type
plot.subtitle = element_text(colour = "white", size = 6 , family = "mono"), # As above for subtitle
axis.title   = element_text(colour = "white", size = 8 , family = "mono"),  # As above for axis titles
axis.text    = element_text(colour = "white", size = 5 , family = "mono"),  # As above for axis text
legend.text  = element_text(colour = "white", size = 8 , family = "mono"),  # As above, for legend text
axis.ticks   = element_blank(),                                             # Turn off axis ticks
legend.title = element_blank(),                                             # Turn off legend title
panel.grid.minor = element_blank(),                                         # Turn off minor grid lines
panel.grid.major = element_blank(),                                         # Turn off major grid lines
panel.background = element_rect(fill = "grey12", colour = "grey12"),        # Panel background colour
panel.border = element_blank(),                                             # Turn off plot border
plot.background = element_rect(fill = "grey12"),                            # Plot background colour
strip.text = element_text(colour = "white", size = 6, family = "mono"))     # Subtitle specs if using facet_wrap
# Chunk 30
ggplot(data = burglary_df) +
geom_density(mapping = aes(x = IMDscore, fill = LAname), colour = "transparent") +
scale_fill_viridis_d() +
facet_wrap(~LAname) +
my_theme +
theme(legend.position = "none")
names(burglary_df)
burglary_df
install.packages("biscale")
ls()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2); library(readr); library(sf); library(geogrid); library(cowplot)
# Chunk 3
# Load data.
manc_sf <- st_read(dsn = "data/burglary_lsoa.shp")
# Ensure BNG CRS.
manc_sf <- st_transform(manc_sf, crs = 27700)
# Number of LSOAs.
nrow(manc_sf) # N = 282
# Plot raw boundaries with deprivation deciles.
ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci)))
# Chunk 4
manc_grid <- calculate_grid(shape = manc_sf, grid_type = "hexagonal", seed = 1612)
# Chunk 5
plot(manc_grid)
# Chunk 7
manc_grid_results_sf <- st_read("data/geogrid_manc.shp")
# Chunk 8
depriv_orig <- ggplot(data = manc_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
depriv_grid <- ggplot(data = manc_grid_results_sf) +
geom_sf(mapping = aes(fill = as.factor(IMDdeci))) +
scale_fill_viridis_d(option = "magma") +
labs(fill = NULL) +
theme(legend.position = "bottom")
plot_grid(depriv_orig, depriv_grid, labels = c("Raw boundaries", "Regular grid"), scale = 0.9)
manc_sf
manc_grid_results_sf <- st_read("data/geogrid_manc.shp")
manc_grid_results_sf
names(manc_grid_results_sf)
